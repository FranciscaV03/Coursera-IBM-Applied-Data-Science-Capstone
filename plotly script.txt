Completed Script

# spacex-dash-app.py
import pandas as pd
from pathlib import Path
from dash import Dash, html, dcc, Input, Output
import plotly.express as px

# ---- Data ----
CSV_PATH = Path(__file__).parent / "spacex_launch_dash.csv"
spacex_df = pd.read_csv(CSV_PATH)

print("CSV loaded from:", CSV_PATH)
print("Columns:", spacex_df.columns.tolist())
print("Rows:", len(spacex_df))

# Make sure these exact columns exist. If not, adjust names here.
REQUIRED = ["Launch Site", "class", "Payload Mass (kg)", "Booster Version Category"]
missing = [c for c in REQUIRED if c not in spacex_df.columns]
if missing:
    raise ValueError(f"Missing required columns: {missing}")

min_payload = int(spacex_df["Payload Mass (kg)"].min())
max_payload = int(spacex_df["Payload Mass (kg)"].max())

# ---- App ----
app = Dash(__name__)
server = app.server

site_options = [{"label": "All Sites", "value": "ALL"}] + [
    {"label": s, "value": s} for s in sorted(spacex_df["Launch Site"].unique())
]

# Initial (non-blank) figures so you see data immediately
init_pie = px.pie(
    spacex_df[spacex_df["class"] == 1],
    names="Launch Site",
    title="(init) Total Successful Launches by Site",
)
init_scatter = px.scatter(
    spacex_df,
    x="Payload Mass (kg)",
    y="class",
    color="Booster Version Category",
    hover_data=["Launch Site"],
    title="(init) Correlation between Payload and Success",
)
init_scatter.update_yaxes(tickvals=[0, 1], ticktext=["Failure", "Success"])

app.layout = html.Div(
    [
        html.H1(
            "SpaceX Launch Records Dashboard",
            style={"textAlign": "center", "color": "#503D36", "font-size": 40},
        ),

        # Dropdown
        dcc.Dropdown(
            id="site-dropdown",
            options=site_options,
            value="ALL",
            clearable=False,
            style={"width": "80%", "margin": "0 auto"},
        ),
        html.Br(),

        # Pie
        dcc.Graph(id="success-pie-chart", figure=init_pie),
        html.Br(),

        # Slider
        html.P("Payload range (Kg):", style={"textAlign": "center"})
        ,
        dcc.RangeSlider(
            id="payload-slider",
            min=min_payload,
            max=max_payload,
            step=1000,
            value=[min_payload, max_payload],
            marks={
                str(min_payload): str(min_payload),
                str(max_payload): str(max_payload),
            },
        ),
        html.Br(),

        # Scatter
        dcc.Graph(id="success-payload-scatter-chart", figure=init_scatter),
    ]
)

# ---- Callbacks ----
@app.callback(Output("success-pie-chart", "figure"),
              Input("site-dropdown", "value"))
def update_pie(selected_site):
    """FIX: robust site-specific pie construction with explicit column naming."""
    print("update_pie ->", selected_site)

    if selected_site == "ALL":
        df_success = spacex_df[spacex_df["class"] == 1]
        return px.pie(
            df_success,
            names="Launch Site",
            title="Total Successful Launches by Site"
        )

    # Slice to the selected site, take the 'class' series
    s = spacex_df.loc[spacex_df["Launch Site"] == selected_site, "class"]

    # Count outcomes
    counts = s.value_counts(dropna=False)

    # Map labels robustly (handles 1/0, True/False, '1'/'0')
    label_map = {1: "Success", 0: "Failure", True: "Success", False: "Failure", "1": "Success", "0": "Failure"}
    counts.index = [label_map.get(x, x) for x in counts.index]

    # Explicit names to avoid pandas version differences
    out_df = counts.rename_axis("Outcome").reset_index(name="Count")

    fig = px.pie(
        out_df,
        names="Outcome",
        values="Count",
        title=f"Success vs Failure for {selected_site}",
    )
    return fig


@app.callback(Output("success-payload-scatter-chart", "figure"),
              [Input("site-dropdown", "value"),
               Input("payload-slider", "value")])
def update_scatter(selected_site, payload_range):
    print("update_scatter ->", selected_site, payload_range)
    low, high = payload_range
    mask = (spacex_df["Payload Mass (kg)"] >= low) & (spacex_df["Payload Mass (kg)"] <= high)
    df = spacex_df[mask]
    if selected_site != "ALL":
        df = df[df["Launch Site"] == selected_site]
    fig = px.scatter(
        df,
        x="Payload Mass (kg)",
        y="class",
        color="Booster Version Category",
        hover_data=["Launch Site"],
        title="Correlation between Payload and Success"
              + ("" if selected_site == "ALL" else f" â€” {selected_site}"),
    )
    fig.update_yaxes(tickvals=[0, 1], ticktext=["Failure", "Success"])
    return fig

# ---- Run ----
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8050, debug=True)
